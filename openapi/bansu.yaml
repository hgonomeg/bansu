openapi: 3.1.0
info:
  title: Bansu
  description: Server-side computation API for Moorhen
  contact:
    name: Jakub Smulski
    email: hgonomeg@gmail.com
  license:
    name: GNU GPLv3
    identifier: GNU GPLv3
  version: 0.4.0-alpha
paths:
  /get_cif/{job_id}:
    get:
      tags: []
      description: For Acedrg jobs, streams the contents of the CIF file generated by Acedrg.
      operationId: get_cif
      parameters:
      - name: job_id
        in: path
        description: Job ID
        required: true
      responses:
        '200':
          description: Success. Streams CIF file contents
          content:
            text/plain: {}
        '400':
          description: The given `job_id` does not correspond to an `Acedrg` job or the job is still pending (or queued)
        '404':
          description: The given `job_id` is not valid
        '500':
          description: Output file could not be read or other error
  /run_acedrg:
    post:
      tags: []
      description: Creates `Acedrg` job.
      operationId: run_acedrg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcedrgArgs'
        required: true
      responses:
        '201':
          description: Success (job spawned)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSpawnReply'
        '202':
          description: Success (job queued)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSpawnReply'
        '400':
          description: Input validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSpawnReply'
        '500':
          description: Other error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSpawnReply'
        '503':
          description: Server is currently at capacity and is unable to handle your request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSpawnReply'
  /vibe_check:
    get:
      tags: []
      description: Health check endpoint.
      operationId: vibe_check
      responses:
        '200':
          description: Server is up and running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VibeCheckResponse'
  /ws/{job_id}:
    get:
      tags: []
      description: |
        Opens a WebSocket connection which allows you to track the job's progress.
        Progress messages are sent in the following scenarios:

        * When the connection gets established
        * When the job status / `job_output` get updated
        * Periodically, with interval specified in server configuration (useful for estimating how long it may take for a queued job to be processed)

        Connection gets automatically closed if the job fails or completes.

        For queued jobs which could not have been started, listening on a WebSocket also lets you know why it failed (including input validation failure and all oher errors).

        The connection ignores all messages sent to it (responds only to Ping messages).
      operationId: job_ws
      parameters:
      - name: job_id
        in: path
        description: Job ID
        required: true
      requestBody:
        description: This is the format of progress reports sent through the WebSocket.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WsJobDataUpdate'
        required: true
      responses:
        '101':
          description: Opens up WebSocket connection
          headers:
            Connection:
              schema:
                type: string
              description: Upgrade
            Upgrade:
              schema:
                type: string
              description: websocket
        '404':
          description: The given `job_id` is not valid
components:
  schemas:
    AcedrgArgs:
      type: object
      description: Contains input SMILES string and an array of additional arguments passed to Acedrg.
      required:
      - smiles
      - commandline_args
      properties:
        commandline_args:
          type: array
          items:
            type: string
          description: 'Array of arguments for Acedrg . Note: not all Acedrg arguments are currently available'
        smiles:
          type: string
          description: Input SMILES string
      example:
        commandline_args:
        - -z
        - --something
        smiles: Your SMILES string
    JobFailureInfo:
      type: string
      enum:
      - TimedOut
      - JobProcessError
      - SetupError
    JobOutput:
      type: object
      required:
      - stdout
      - stderr
      properties:
        stderr:
          type: string
        stdout:
          type: string
    JobSpawnReply:
      type: object
      properties:
        error_message:
          type:
          - string
          - 'null'
          description: Null on success
        job_id:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/String'
            description: UUID of the spawned job. Null on error
        queue_position:
          type:
          - integer
          - 'null'
          description: Position counted from 0. Null if the job is being processed without a queue.
          minimum: 0
      example:
        error_message: Error message if the request failed
        job_id: UUID of your job
        queue_position: 12
    JobStatusInfo:
      type: string
      enum:
      - Pending
      - Finished
      - Failed
      - Queued
    String:
      type: string
    VibeCheckResponse:
      type: object
      required:
      - version
      - active_jobs
      - uptime
      properties:
        active_jobs:
          type: integer
          description: Number of jobs currently being processed
          minimum: 0
        max_queue_length:
          type:
          - integer
          - 'null'
          description: Max length of the queue or null if queue disabled
          minimum: 0
        queue_length:
          type:
          - integer
          - 'null'
          description: Length of the queue or null if queue disabled
          minimum: 0
        uptime:
          type: integer
          format: int64
          description: Uptime in seconds
          minimum: 0
        version:
          type: string
          description: Bansu version
      example:
        active_jobs: 3
        max_queue_length: 30
        queue_length: 12
        uptime: 986986
        version: v0.4.0
    WsJobDataUpdate:
      type: object
      required:
      - status
      properties:
        error_message:
          type:
          - string
          - 'null'
          description: Can be not-null only if the job failed. Currently, this only has value for `SetupError` failure reason
        failure_reason:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/JobFailureInfo'
            description: Only not-null if the job failed
        job_output:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/JobOutput'
            description: Will be null if the job is still pending, if it timed-out or the child process failed due to an I/O error
        queue_position:
          type:
          - integer
          - 'null'
          description: Only not-null if the job is queued
          minimum: 0
        status:
          $ref: '#/components/schemas/JobStatusInfo'
          description: Job status
      example:
        error_message: Some error message
        failure_reason: TimedOut | JobProcessError | SetupError
        job_output:
          stderr: A string
          stdout: A string
        queue_position: number | null
        status: Pending | Finished | Failed | Queued
